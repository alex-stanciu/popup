/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var $ = jQuery;
var body = $('body');
var popups = [];
var openPopups = {};
var openPopupsFifo = [];
var overlay = $('.overlay');

overlay.on('click', function () {
  if (openPopupsFifo.length) {
    openPopupsFifo[openPopupsFifo.length - 1].close();
  }
});

function closePopup(id) {
  if (openPopups[id]) {
    openPopups[id].close();
  }
}

var Popup = function () {
  function Popup(element, id) {
    var _this = this;

    _classCallCheck(this, Popup);

    this.element = $(element);
    this.id = id || this.element.attr('id');

    this._listeners = { open: [], close: [] };

    popups.push(this);
    this.emitData('created', this);

    this._listeners = {};

    $(window).on('keyup', function (event) {
      if (event.keyCode === 27) {
        closePopup(_this.id);
      }
    });
    this.registerClose();
  }

  _createClass(Popup, [{
    key: 'emitData',
    value: function emitData(event, data) {
      if (!this._listeners[event]) {
        return;
      }

      if (!Array.isArray(data)) {
        data = [data];
      }

      for (var i = 0; i < this._listeners[event].length; ++i) {
        this._listeners[event][i].apply(this, data);
      }
    }
  }, {
    key: 'extend',
    value: function extend(id, extender) {
      var _this2 = this;

      if (!this._extends) {
        this._extends = {};

        Popup.on('created', function (popup) {
          var extenders = _this2._extends[popup.id];
          if (!extenders) {
            return;
          }

          for (var i = 0; i < extenders.length; ++i) {
            extenders[i](popup);
          }
        });
      }

      if (!Array.isArray(id)) {
        id = [id];
      }

      for (var i = 0; i < id.length; ++i) {
        if (!this._extends[id[i]]) {
          this._extends[id[i]] = [];
        }

        this._extends[id[i]].push(extender);

        var popup = Popup.getById(id[i]);
        if (popup) {
          extender(popup);
        }
      }
    }
  }, {
    key: 'isOpen',
    value: function isOpen() {
      return this.element.hasClass('open');
    }
  }, {
    key: 'toggle',
    value: function toggle() {
      this.setState(this.isOpen() ? 0 : 1);
      return this;
    }
  }, {
    key: 'open',
    value: function open() {
      if (this.isOpen()) {
        return this;
      }

      this.setState(1);
      return this;
    }
  }, {
    key: 'close',
    value: function close() {
      if (!this.isOpen()) {
        return this;
      }

      this.setState(0);
      return this;
    }
  }, {
    key: 'on',
    value: function on(event, callback) {
      if (!this._listeners[event]) {
        this._listeners[event] = [];
      }
      this._listeners[event].push(callback);
    }
  }, {
    key: 'emit',
    value: function emit(event) {
      if (!this._listeners[event]) {
        return;
      }

      for (var i = 0; i < this._listeners[event].length; ++i) {
        this._listeners[event][i](this);
      }
    }
  }, {
    key: 'setState',
    value: function setState(state) {
      var stateSetter = ['removeClass', 'addClass'][state];
      if (state) {
        if (this.id) {
          openPopups[this.id] = this;
        }
        openPopupsFifo.push(this);
      } else {
        if (this.id) {
          delete openPopups[this.id];
        }
        openPopupsFifo.splice(openPopupsFifo.indexOf(this), 1);
      }

      this.element[stateSetter]('open');

      if (state && openPopupsFifo.length === 1 || !state && openPopupsFifo.length === 0) {
        overlay[stateSetter]('open');
        body[stateSetter]('no-scroll');
      }

      this.emit(['close', 'open'][state]);
      this.emitData(['close', 'open'][state], this);
    }
  }, {
    key: 'registerClose',
    value: function registerClose() {
      var self = this;
      $('[data-popup-close]', this.element).each(function (index, element) {
        $(element).on('click', self.close.bind(self));
      });

      $('[data-popup-toggle]', this.element).each(function (index, element) {
        $(element).on('click', self.toggle.bind(self));
      });
    }
  }], [{
    key: 'getById',
    value: function getById(id) {
      for (var i = 0; i < popups.length; ++i) {
        if (popups[i].id === id) {
          return popups[i];
        }
      }

      return null;
    }
  }, {
    key: 'register',
    value: function register(html, id) {
      var popup = $(html);
      $('body').append(popup);
      return new Popup(popup, id);
    }
  }, {
    key: 'closeAll',
    value: function closeAll() {
      while (openPopupsFifo.length) {
        openPopupsFifo[0].close();
      }
    }
  }, {
    key: 'closePrevious',
    value: function closePrevious() {
      if (!openPopupsFifo.length) {
        return;
      }

      while (openPopupsFifo.length !== 1) {
        openPopupsFifo[0].close();
      }
    }
  }]);

  return Popup;
}();